services:
 api:
   build:
     context: .
     dockerfile: src/infrastructure/frameworks/express/Dockerfile
   ports:
     - "3001:3001"
   environment:
     - DB_USER=${DB_USER}
     - DB_HOST=${DB_HOST}
     - DB_NAME=${DB_NAME}
     - DB_PASSWORD=${DB_PASSWORD}
     - DB_PORT=${DB_PORT}
     - NODE_ENV=${NODE_ENV}
     - DATABASE_URL=${DATABASE_URL}
     - JWT_SECRET_KEY=${JWT_SECRET_KEY}
     - JWT_REFRESH_KEY=${JWT_REFRESH_KEY}
   volumes:
     - ./:/usr/src/app:delegated
     - /usr/src/app/node_modules
   depends_on:
     db:
       condition: service_healthy
   networks:
     - app-network

 frontend:
   build:
     context: .
     dockerfile: src/infrastructure/frameworks/react/Dockerfile
   ports:
     - "5173:5173"
   environment:
     - VITE_API_URL=${VITE_API_URL}
   volumes:
    - ./src/infrastructure/frameworks/react:/usr/src/app
    - /usr/src/app/node_modules
   depends_on:
     - api
   networks:
     - app-network

 db:
   image: postgres:15-alpine
   restart: always
   environment:
     - POSTGRES_USER=${DB_USER}
     - POSTGRES_PASSWORD=${DB_PASSWORD}
     - POSTGRES_DB=${DB_NAME}
   command: postgres -c 'max_connections=1000'
   ports:
     - "5432:5432"
   volumes:
     - postgres_data:/var/lib/postgresql/data
   healthcheck:
     test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
     interval: 5s
     timeout: 5s
     retries: 5
   networks:
     - app-network

 adminer:
   image: adminer:latest
   ports:
     - "8080:8080"
   depends_on:
     - db
   environment:
     - ADMINER_DEFAULT_SERVER=db
     - ADMINER_DESIGN=dracula
   networks:
     - app-network

volumes:
 postgres_data:

networks:
 app-network:
   driver: bridge