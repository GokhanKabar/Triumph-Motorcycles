import { Sequelize } from 'sequelize';
import IncidentModel from '../models/IncidentModel';
import TestRideModel from '../models/TestRideModel';
import { IncidentType, IncidentStatus } from '@domain/incident/enum';
import { v4 as uuidv4 } from 'uuid';

export class IncidentSeed {
  static async seed(sequelize?: Sequelize, force: boolean = false): Promise<void> {
    try {
      console.log('üö® D√©but du seed des incidents...');

      // V√©rifier si des incidents existent d√©j√†
      const incidentCount = await IncidentModel.count();
      if (incidentCount > 0 && !force) {
        console.log('üí° Des incidents existent d√©j√†. Seed ignor√©.');
        return;
      }

      // Supprimer les incidents existants si force est true
      if (force) {
        await IncidentModel.destroy({ 
          where: {},
          truncate: true // Utiliser truncate pour r√©initialiser compl√®tement la table
        });
      }

      // R√©cup√©rer les test rides
      const testRides = await TestRideModel.findAll();

      if (testRides.length === 0) {
        console.warn('‚ö†Ô∏è Aucun test ride trouv√©. Impossible de cr√©er des incidents.');
        return;
      }

      // Cr√©er des incidents de seed
      const seedIncidents = testRides.map((testRide, index) => ({
        id: uuidv4(), // G√©n√©rer un nouvel UUID pour chaque incident
        testRideId: testRide.id,
        type: this.getRandomIncidentType(),
        status: this.getRandomIncidentStatus(),
        description: this.getRandomIncidentDescription(index),
        incidentDate: new Date(Date.now() - Math.floor(Math.random() * 30) * 24 * 60 * 60 * 1000) // Date dans les 30 derniers jours
      }));

      // Ins√©rer les incidents de seed
      await IncidentModel.bulkCreate(seedIncidents);

      console.log(`üèç Seed de ${seedIncidents.length} incidents termin√© avec succ√®s`);
    } catch (error) {
      console.error('‚ùå Erreur lors du seed des incidents:', error);
      throw error;
    }
  }

  private static getRandomIncidentType(): IncidentType {
    const types = Object.values(IncidentType);
    return types[Math.floor(Math.random() * types.length)];
  }

  private static getRandomIncidentStatus(): IncidentStatus {
    const statuses = Object.values(IncidentStatus);
    return statuses[Math.floor(Math.random() * statuses.length)];
  }

  private static getRandomIncidentDescription(index: number): string {
    const baseDescriptions = [
      'Chute l√©g√®re lors du test de la moto',
      'Probl√®me de frein d√©tect√© durant le test',
      'Situation dangereuse √©vit√©e de justesse',
      'Pr√©occupation concernant la stabilit√© du v√©hicule',
      'Probl√®me m√©canique mineur observ√©',
      'Incident sans gravit√© durant le test ride'
    ];
    
    // Utiliser une combinaison de l'index pour garantir l'unicit√©
    const uniqueDescription = `${baseDescriptions[index % baseDescriptions.length]}`;
    
    return uniqueDescription;
  }
}
